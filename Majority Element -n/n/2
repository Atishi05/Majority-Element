LINK -> https://leetcode.com/problems/majority-element/

CODE -> BETTER -> O(n log n) & O(n)

class Solution {
    public int majorityElement(int[] nums) {
        int n = nums.length;
        HashMap<Integer, Integer> mp = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int value = mp.getOrDefault(nums[i], 0);
            mp.put(nums[i], value + 1);
        }
        for (Map.Entry<Integer, Integer> it : mp.entrySet()) {
            if (it.getValue() > (n / 2)) {
                return it.getKey();
            }
        }
        return -1;
        }
}

CODE -> OPTIMAL -> O(n) & O(1)

class Solution {
    public int majorityElement(int[] nums) {
        int count = 0,candidate = 0;
        for(int i:nums){
            if(count == 0)
                candidate = i;
            if(i == candidate)
                count++;
            else
                count--;
        }
        return candidate;
        }
} 
